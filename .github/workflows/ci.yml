name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          pip install -e .
      - name: Check code formatting with Black
        run: black --check mcp_chart_scanner tests
      - name: Check imports with isort
        run: isort --check mcp_chart_scanner tests
      - name: Lint with flake8
        run: flake8 mcp_chart_scanner tests --max-line-length=120

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -e .
      - name: Test with pytest
        run: pytest --cov=mcp_chart_scanner tests/

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build package
        run: python -m build
      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Extract version from pyproject.toml
        id: version
        run: |
          VERSION=$(grep -m 1 'version = ' pyproject.toml | cut -d '"' -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/mcp-chart-scanner:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/mcp-chart-scanner:v${{ steps.version.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/mcp-chart-scanner:git-${{ github.sha }}

  commit-lint:
    name: Commit Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check commit message format
        run: |
          # Get all commits in the PR
          PR_COMMITS=$(git log --format=%s origin/${{ github.base_ref }}..HEAD)
          
          # Check each commit message
          echo "$PR_COMMITS" | while read -r commit_msg; do
            # Skip merge commits
            if [[ "$commit_msg" == Merge* ]]; then
              continue
            fi
            
            if ! echo "$commit_msg" | grep -E "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .+" > /dev/null; then
              echo "Error: Commit message '$commit_msg' does not follow the conventional commit format."
              echo "Format should be: type(scope): description"
              echo "Types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
              exit 1
            fi
          done
